Exercise 

1.
Clean code is essential to achieve readability, ease of maintenance, and simplicity of your code.
This becomes more important as you work with a large scaled team. 

2.
I would think of airplanes, knowing most of the monitorings and controlls are done by computers.
If the codes in the computer dones not work correctly, pilot will not only fail to understand how the plane is 
working as well as controlling it properly. 

3.
No.

Refactored code:
FUNCTION do(temperature, scale)               
 IF scale = "F" THEN               
 SET newteperature to (temperature âˆ’ 32) * (5/9)       
 ELSE IF scale = "C" THEN          
 SET newteperature to temperature * 1.8000 + 32.00   
 END IF
PRINT newteperature                       
END FUNCTION

4.
Yes

5.

a.


FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
SET totaldue = subTotal * discountRate + (subTotal * tax)
   PRINT "Your total due is: " + totaldue

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - totaldue)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + totaldue
   END IF
END FUNCTION

b.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive AND NOT(guest.hasOverdueBooks) AND guest.outstandingFees = 0 THEN
    APPEND book to guest.books
    SET book.status to "Checked Out"
    PRINT "Your books have been issued."
  ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

c.

CLASS Customeroperation

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

CLASS Bankoperation

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

Programming Questions.

6. Squares

const numbers = [1,2,3,4,4];

var add = (accumulator, a) => {
return accumulator + a;
}

const sum = numbers.reduce(add)

const integer = Number.isInteger(sum);

const root = Math.sqrt(sum);

function returnvalue() {

if (integer === true) {
  return root;
      } else {
   return sum;    
   return "The square root of" + sum + "is approximately" + root + "."  
      }
}

7. Duplicates

const numbers = [1,2,3,4,4];

function checkduplicate() {
  for (i = 0; i < numbers.length; i++) {
    for (x = 0, x < numbers.length; x++;) {
      if (i != x) {
        if (numbers[i] == numbers[x]) {
          return true;
        }
      } 
    }
  }
}




