1.Implement a solution for bubble sort.

Written in Javascript

function bubble_Sort(a)
{
    var swapp;
    var n = a.length-1;
    var x=a;
    do {
        swapp = false;
        for (var i=0; i < n; i++)
        {
            if (x[i] < x[i+1])
            {
               var temp = x[i];
               x[i] = x[i+1];
               x[i+1] = temp;
               swapp = true;
            }
        }
        n--;
    } while (swapp);
 return x; 
}

2.Write pseudocode for quicksort.

Input: an array A[p, r]

Quicksort (A, p, r) {
if (p < r) {
q = Partition (A, p, r) 
Quicksort (A, p, q-1)
Quicksort (A, q+1, r)
}
}

3.We talked about time complexity in a previous checkpoint, 
 and how to get an idea of the efficiency of an algorithm. 
 After looking at the pseudocode for the above sorting methods, 
 identify why merge sort and quick sort are much more efficient 
 than the others. Walking through each algorithm with a few sample 
collections may help.

Merge sort and quick sorts are more efficient from a time complexity perspective
compared to others shown in this check point, for example merge sort has a worst
time complexity: O(n log(n)) and quick sort has a worst time complexity of
O(n^2), where for example bubble sort has the time complexity of O(n2).

4.All of the sorts addressed in this checkpoint are known as comparison sorts. 
Research bucket sort and explain how it works. 
What is the ideal input for bucket sort?

Bucket Sort works by distributing the elements of an array into a 
number of buckets. Each bucket is then sorted individually, either 
using a different sorting algorithm, or by recursively applying 
the bucket sorting algorithm.

An ideal input for bucket sort is 

Inputs which are uniformly distributed over a range