1.
Bellow are the pros/cons of using linked lists 
Pros: Efficient in memory consumption
Cons: Inefficient to access an element 

2. 
The DNS server on internet appears to have a simular concept, since it has the domain name information to route 
accesses as well as refering to other DSN servers to find the destination if does not have the information. 

Programming Questions

Programmed in Java Script 

1. 
The pseudocode should include a while loop to find the end of the linked lists to add a new node to it.
Bellow is a functional code written in Java Script. 

    push(element) {
        const newNode = element; 
        newNode.next = null;  
        if (!head) {
          head = newNode;
          return head;
        } else {
          current = head;
          while(current.next != null){
          current = current.next;
           }
            current.next = node;
            return head;
  }  
    }
}

2. and 3.

See bellow code

function LinkedList() {
    this.head = null;
    this.tail = null;
}

function Node(value, next, prev) {
    this.value = value;
    this.next = next;
    this.prev = prev;
}

LinkedList.prototype.addTotail = function(value) {
    var newNode = new Node(value, null, this.tail);

    if(this.tail) this.tail.next = newNode;
    else this.head = newNode;
    this.tail = newNode;
};

var ll = new LinkedList();

ll.addTotail("A");
ll.addTotail("B");
ll.addTotail("A");
ll.addTotail("C");
ll.addTotail("B");
ll.addTotail("D");
ll.addTotail("E");


LinkedList.prototype.removeDuplicates = function(list) {
    current = list.head
  
    while(current.next != null) {
              fast  = current.next;
        while (fast.next != null) {
            if(current.value === fast.value) {
                fast.prev.next = fast.next;
                fast = fast.next;
            } else {
                fast = fast.next;
            }
        } current = current.next;
    }
};

LinkedList.prototype.reverseOrder = function(list) {
    current = list.tail;
    while(current.prev != null) {
        current.next = list.head;
        current = current.prev;
    } 
};

ll.removeDuplicates(ll);
console.log(ll);